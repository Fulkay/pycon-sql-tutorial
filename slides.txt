





               Sphinx for Python Developers






                        PyCon 2012
                      Brandon Rhodes







                           Files
                           —————

                  • movie.db database
                  • virtualenv tool
                  • SQLAlchemy package
                  • SQLAlchemy documentation
                  • SQLite3 documentation
                  • dbapi.py script
                  • alchemy.py script









                        Principles
                        ——————————


                     tools NOT slides
                 exploring NOT explanation



                      The Big Picture
                      ———————————————

  Python vs SQL: Statements  — procedures vs queries
                 Flow        — explicit vs implicit
                 Variables   — objects vs tables
                 Data types  — containers vs relations
                 Consistency — locks vs transactions

  Query optimization, both single-table and JOIN

  DB-API:        Quoting and security
                 Combining statements for efficiency

  ORM:           "Object-Relational Mapper" as persistence
                 Objects are prettier than the DB-API
                 Using JOIN to expose your query







                         The Gist
                         ————————


                 • One container: TABLE
                 • One statement: INSERT
                 • One abstraction: JOIN


                            Why?

                         it scales



                 Another approach: MongoDB

 {title: "Sleuth",
  year: 1972,
  roles: [
      {name: "Andrew Wyke",
       actor: {name: "Laurence Olivier", born: 1907}
      },
      {name: "Andrew Wyke",
       actor: {name: "Laurence Olivier", born: 1907}
      }]}

 {title: "Sleuth",
  year: 1972,
  roles: [{name: "Andrew Wyke", actor: 19832},
          {name: "Andrew Wyke", actor: 5239}
  ]}



        ┌┐           ↘ ┌┐ ⎫┌┐      ┌┐
        ├┤           ↗ └┘ ⎭└┘    → └┘
        ├┤    ┌┐
        ├┤ →  ├┤       ┌┐ ⎫
        ├┤    └┘     ↘ ├┤ ⎪               ↘  ┌┐
        ├┤           ↗ ├┤ ⎪┌┐             ↗  ├┤
        ├┤  → ┌┐     ↘ ├┤ ⎪└┘             ↘  └┘
        ├┤    └┘       └┘ ⎭
        ├┤  WHERE   GROUP BY    HAVING   ORDER BY
        ├┤
        ├┤  → ┌┐       ┌┐ ⎫
        ├┤    ├┤     ↗ ├┤ ⎪┌┐      ┌┐
        ├┤    └┘     ↘ ├┤ ⎪└┘    → └┘
        ├┤  → ┌┐     ↗ └┘ ⎭
        ├┤    └┘
        ├┤    ┌┐
        └┘    └┘



  EXPLAIN QUERY PLAN SELECT * FROM movie JOIN role ON
  (movie.id = movie_id) JOIN actor ON (actor_id = actor.id)
  WHERE movie.year >= 1920 AND movie.year <= 1921 AND
  actor.name >= 'Smith' AND actor.name <= 'Smitha';
  
  CREATE INDEX i1 ON movie (year);
  CREATE INDEX i2 ON actor (name);

  (more explains)

  CREATE INDEX i3 ON role (movie_id);
  CREATE INDEX i4 ON role (actor_id);

  (more explains)

  ANALYZE;

Local variables:
 mode:text
 mode:page
 fill-column:59
End:
